@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text.RegularExpressions;
@*https://stackoverflow.com/questions/65744610/blazor-autocomplete-tagging/65748719*@


<div id="@($"{Id}_tagsinput")" class="tagsinput">

    <Survey.Client.Pages.App.Util.TagShower Tags="Tags"
                                            DeleteVisible="true">
    </Survey.Client.Pages.App.Util.TagShower>

    <div id="@($"{Id}_addTag")">
        <div class="@(IsContainSpecialCharacter ? "tag-tooltip" : string.Empty)">
            <BlazoredTypeahead SearchMethod="SearchFilms"
                               @onkeyup="AddTags"
                               @onclick="AddTagsClick"
                               AddItemOnEmptyResultMethod="testAdding"
                               TValue="string"
                               TItem="string"
                               Value="Value"
                               ValueExpression="@(() => Value)"
                               ValueChanged="SelectedResultChanged">
                <SelectedTemplate>
                    @context
                </SelectedTemplate>
                <ResultTemplate>
                    @context
                </ResultTemplate>
                <NotFoundTemplate>@context</NotFoundTemplate>
            </BlazoredTypeahead>

            @*<input id="@($"{Id}_tag")"
                class="tag-input"
                placeholder="Add tags"
                autocomplete="off"
                @bind-value="Value"
                @bind-value:event="oninput"
                @onkeyup="AddTags" />*@

            @if (IsContainSpecialCharacter)
            {
                <div class="error-right d-inline-flex p-2">
                    <i class="oi oi-warning text-warning p-1"></i>
                    <p class="text-left m-0 p-1">Special characters not allowed.</p>
                    <i></i>
                </div>
            }
        </div>
    </div>
</div>

@code {

    private Guid Id => Guid.NewGuid();
    protected string Value { get; set; }
    protected bool MenuVisibility { get; set; }
    protected bool IsContainSpecialCharacter { get; set; }
    [Parameter]
    public IList<string> Tags { get; set; } = new List<string>();

    private async Task SelectedResultChanged(string result)
    {
        Tags.Add(result);
    }

    public async Task<string> testAdding(string s)
    {
        Tags.Add(s);
        return await Task.FromResult(s);

    }

    protected void AddTags(KeyboardEventArgs eventArgs)
    {
        IsContainSpecialCharacter = false;

        if (!String.IsNullOrEmpty(Value))
        {

            var regex = new Regex(@"[^a-zA-Z0-9\s]");
            if (!regex.IsMatch(Value))
            {
                if (!Tags.Any(t => t.Equals(Value, StringComparison.CurrentCultureIgnoreCase)))
                {
                    Tags.Add(Value);
                }

                Value = string.Empty;
            }
            else
            {
                IsContainSpecialCharacter = true;
            }
        }
    }
    protected void AddTagsClick()
    {
        Console.WriteLine("AddtagsClick");
    }
    protected void AddTagsOnChange(ChangeEventArgs c)
    {
        var a = c.Value;


        Console.WriteLine("change event rgs");
        Console.WriteLine(a);
        Console.WriteLine(stringSearchedText);
    }

    protected override void OnInitialized()
    {
    }
    private string stringSearchedText;
    [Parameter]
    public Func<string, Task<IEnumerable<string>>> SearchMethod { get; set; }

    private async Task<IEnumerable<string>> SearchFilms(string searchText)
    {
        return await SearchMethod.Invoke(searchText);
    }






}



<style>

    .suggestion-container {
        position: relative;
    }

    .tagsinput, .tagsinput * {
        box-sizing: border-box
    }

    .tagsinput {
        display: -webkit-box;
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
        -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
        flex-wrap: wrap;
        background: #fff;
        font-size: 14px;
        line-height: 20px;
        color: #556270;
        padding: 5px 5px 0;
        border: 1px solid #e6e6e6;
        border-radius: 2px
    }

        .tagsinput.focus {
            border-color: #ccc
        }

        .tagsinput .tag {
            position: relative;
            background: #556270;
            display: block;
            max-width: 100%;
            word-wrap: break-word;
            color: #fff;
            padding: 5px 30px 5px 5px;
            border-radius: 2px;
            margin: 0 5px 5px 0
        }

            .tagsinput .tag .tag-remove {
                position: absolute;
                background: 0 0;
                display: block;
                width: 30px;
                height: 30px;
                top: 0;
                right: 0;
                cursor: pointer;
                text-decoration: none;
                text-align: center;
                color: #ff6b6b;
                line-height: 30px;
                padding: 0;
                border: 0
            }

                .tagsinput .tag .tag-remove:after, .tagsinput .tag .tag-remove:before {
                    background: #ff6b6b;
                    position: absolute;
                    display: block;
                    width: 10px;
                    height: 2px;
                    top: 14px;
                    left: 10px;
                    content: ''
                }

                .tagsinput .tag .tag-remove:before {
                    -webkit-transform: rotateZ(45deg);
                    transform: rotateZ(45deg)
                }

                .tagsinput .tag .tag-remove:after {
                    -webkit-transform: rotateZ(-45deg);
                    transform: rotateZ(-45deg)
                }

        .tagsinput div {
            -webkit-box-flex: 1;
            -webkit-flex-grow: 1;
            -ms-flex-positive: 1;
            flex-grow: 1
        }

            .tagsinput div input {
                background: 0 0;
                display: block;
                width: 100%;
                font-size: 14px;
                line-height: 20px;
                padding: 5px;
                border: 0;
                margin: 0 5px 5px 0
            }

                .tagsinput div input:focus {
                    color: #495057;
                    background-color: #fff;
                    border-color: #80bdff;
                    outline: 0;
                    box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
                }

                .tagsinput div input.error {
                    color: #ff6b6b
                }

                .tagsinput div input::-ms-clear {
                    display: none
                }

                .tagsinput div input::-webkit-input-placeholder {
                    color: #ccc;
                    opacity: 1
                }

                .tagsinput div input:-moz-placeholder {
                    color: #ccc;
                    opacity: 1
                }

                .tagsinput div input::-moz-placeholder {
                    color: #ccc;
                    opacity: 1
                }

                .tagsinput div input:-ms-input-placeholder {
                    color: #ccc;
                    opacity: 1
                }
</style>