@using Survey.Shared.DTOs
@attribute [Microsoft.AspNetCore.Components.RouteAttribute(Constants.FRONTEND_URL.ADD_BOARDFILLERS + "/{BoardId}")]
@using System.Linq

<EditForm Model="boardFillerGenerationDto">
    <DataAnnotationsValidator />
    <div class="form-group">
        @*@for (int i = 0; i<list.Count(); i++)
            {
                var i2 = i;

                <input @onfocusin="@((args) => ClickedInside(args))"
                       @onfocusout="MouseOut"
                       @bind="list[i]"
                       @oninput="@(ui => SajatOnInput(ui))"
                       @ref="list[i2]" />
            }*@
        @for (int i = 0; i < list.Count; i++)
        {
            // see https://stackoverflow.com/a/56426146/323447
            var iCopy = i;

            <p>
                <label for="@($"effect{i}")">@i</label>
                <input id="@($"effect{i}")" value="@list[i]"
                       @oninput="@(e => SajatOnInput(e,iCopy,(e?.Value?.ToString() ?? "")))"
                       @onfocusout="MouseOut"
                       @onfocusin="MouseIn" />
            </p>
        }
        @*<InputText @onclick="" @bind-Value="@asd" class="form-control" id="emails"></InputText>*@
    </div>
    <button class="btn btn-success" type="submit">Save changes</button>
</EditForm>

@code {
    public ElementReference[] memberRef { get; set; } = new ElementReference[11];

    public string? value2 { get; set; }
    public int index { get; set; } = 0;
    int refi = 0;

    [Parameter]
    public string BoardId { get; set; } = default!;

    public List<string> list { get; set; } = new List<string>()
{
        "alma",
        "korte"
    };
    public void MouseOut()
    {
        //if (value2 != null)
        //{
        //    list[index] = value2;
        //}

        list.RemoveAll(x => x == string.Empty);
        list.Add(string.Empty);

        for (int i = 0; i<list.Count()-1; i++)
        {
            if (list[i] == string.Empty)
            {
                list.RemoveAt(i);
            }
        }

        list.ForEach(Console.WriteLine);
    }

    public void MouseIn()
    {
        //list.RemoveAll(x => x == string.Empty);
        //list.Add(string.Empty);
    }

    public void SajatOnInput(ChangeEventArgs a, int iCopy, string text)
    {
        list[iCopy] = text;
        value2 = (string?)a.Value;
        StateHasChanged();

        if (!list.Where(x => x == string.Empty).Any())
        {
            list.Add(string.Empty);

        }

    }

    public BoardFillerGenerationDto boardFillerGenerationDto { get; set; } =
        new BoardFillerGenerationDto(
            new List<string>() { "alma@a.hu", "korte@b.hu" }
            , new Guid()
        );

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
}
