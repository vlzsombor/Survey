@page "/register"
@inject IAccountsRepository accountsRepository
@inject NavigationManager navigationManager
@inject ILoginService loginService

@using Survey.Client.Auth
@using Survey.Shared.Model
@using Survey.Shared.DTOs

<EditForm Model="userInfo" OnValidSubmit="CreateUser">
    <DataAnnotationsValidator />
    <div class="form-group my-3">
        <label for="password">Email</label>
        <InputText @bind-Value="userInfo.Email" type="email" id="email" class="form-control" />
        <ValidationMessage For="@(()=>userInfo.Email)" />
    </div>

    <div class="form-group my-3">
        <label for="password">Password</label>
        <InputText @bind-Value="userInfo.Password" type="password" id="password" class="form-control" />
        <ValidationMessage For="@(()=>userInfo.Password)" />
    </div>
    <ValidationSummary />
    <button type="submit" class="btn btn-primary">Register</button>
    <ul>
        @if (userToken?.ErrorDict != null)
        {
            @foreach (var x in userToken.ErrorDict)
            {
                <li style="background-color:rebeccapurple">@x.Key</li>
                <li>@x.Value</li>
            }
        }
    </ul>
</EditForm>

@code{
    private UserInfo userInfo = new UserInfo();
    UserToken? userToken;

    private async Task CreateUser()
    {
        userToken = await accountsRepository.Register(userInfo);
        if (userToken?.Token != null)
        {
            await loginService.Login(userToken.Token);
            navigationManager.NavigateTo("");
        }
    }


}


